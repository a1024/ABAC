#pragma once
#ifndef INC_BATTLE_H
#define INC_BATTLE_H
#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
#include"util.h"
#ifdef __cplusplus
extern "C"
{
#endif


//	#define ENABLE_GUIDE//debug


//Huffman Coder		TODO support channels/bytestride
int huff_compress(
	const void *src, //The source data to be compressed
	size_t srcSize,  //The count of bytes in source data
	ArrayHandle *dst //The destination array, must be a byte array.
);//Returns true on success.

int huff_decompress(
	const unsigned char *src, //The data to decompress. Must be generated by huff_compress().
	size_t srcSize,           //The byte count of data in src.
	ArrayHandle *dst          //The destination array.
);//Returns true on success.


//Binary Arithmetic Coder (AC)
long long   ac0_encode(const void *src, ptrdiff_t nbytes, int bitoffset, int bitdepth, int bytestride, ArrayHandle *out, int loud);
const void* ac0_decode(const void *srcstart, const void *srcend, void *dst, size_t nbytes, int bitoffset, int bitdepth, int bytestride, int loud
#ifdef ENABLE_GUIDE
	, unsigned char *guide
#endif
);//set the dst buffer to zero


//Adaptive Binary Arithmetic Coder (ABAC)
int         abac4_encode(const void *src, int symcount, int bitoffset, int bitdepth, int bytestride, ArrayHandle *output, int loud);
const void* abac4_decode(const void *in_start, const void *in_end, void *dst, int imsize, int bitoffset, int bitdepth, int bytestride, int loud);//set the dst buffer to zero

//abac0a: Encodes 8-bit symbols. Uses SSSE3 with 15-bit probability.
//If output was initialized, output->esize must be 1.
int         abac0a_encode(const unsigned char *src, int count, int bytestride, ArrayHandle *output, int loud);
const void* abac0a_decode(const void *src_start, const void *src_end, unsigned char *dst, int count, int bytestride, int loud);//set the dst buffer to zero


//Range-Asymmetric Numeral Systems (rANS)
typedef enum RANS_ErrorEnum
{
	RANS_INVALID_NBYTES=-5,
	RANS_INVALID_SYMBYTES,
	RANS_INVALID_DST,

	RANS_INVALID_TAG,
	RANS_BUFFER_OVERRUN,
	
	RANS_SUCCESS,
} RANS_Error;
int rans4_encode(const void *src, ptrdiff_t nbytes, int symbytes, int is_signed, ArrayHandle *out, int loud, unsigned short *custom_pred);//bytespersymbol: up to 16
int rans4_decode(const unsigned char *srcdata, ptrdiff_t srclen, ptrdiff_t nbytes, int symbytes, int is_signed, void *dstbuf, int loud, unsigned short *custom_pred);

//test
int rans8_testencode(const void *src, int bw, int bh, int bitdepth, int bytestride, unsigned short prob_MPS, ArrayHandle *out);
int rans0b_testencode(const void *src, int bw, int bh, int bitdepth, int bytestride, int blockdim, int prob_bits, ArrayHandle *out);
size_t rans0c_testencode(const void *src, int bw, int bh, int symbytes, int bytestride, ArrayHandle *out);

//	#define PROB32

#ifdef PROB32
typedef unsigned Prob;
typedef unsigned long long State;
#else
typedef unsigned short Prob;
typedef unsigned State;
#endif
#define PROBBITS (sizeof(Prob)<<3)
#define ONE (State)(1LL<<PROBBITS)
Prob* rans5_preptable();
long long rans5_encode(const void *src, int bw, int bh, int symbytes, int bytestride, ArrayHandle *out, Prob *table);

//rans_sse2: symbytes must be a power of two, nbytes must be divisible by 16
int rans_sse2_encode(const void *src, size_t nbytes, int symbytes, int is_signed, ArrayHandle *out);
int rans_sse2_decode(const void *srcdata, size_t srclen, void *dstbuf, size_t nbytes, int symbytes, int is_signed
#ifdef ENABLE_GUIDE
	, unsigned char *guide
#endif
);


//WIP
int                  uabs_encode_ch(const void *src, size_t nbytes, int bitoffset, int bitdepth, int bytestride, ArrayHandle *out);
const unsigned char* uabs_decode_ch(const unsigned char *data, size_t srclen, void *dst, size_t nbytes, int bitoffset, int bitdepth, int bytestride
#ifdef ENABLE_GUIDE
	, const unsigned char *guide
#endif
);


int arans_encode(const void *src, ptrdiff_t nbytes, int bytestride, ArrayHandle *out);


long long lz_encode(const void *src, int bw, int bh, int bytestride, ArrayHandle *data, size_t *ret_overhead);//FIXME encoding channels separately

long long test1_encode(const void *src, int bw, int bh, int symbytes, int bytestride, ArrayHandle *data);


#ifdef __cplusplus
}
#endif
#endif//INC_BATTLE_H
